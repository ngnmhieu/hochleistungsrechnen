
1. Kompilieren
"""""""""""""""""""""""""""
Das Programm ist mit folgenden Flags kompiliert: -pg -std=c11 -pedantic -Wall -Wextra

2. Profiling mit gprof:
"""""""""""""""""""""""""""
gprof zeigt eine Liste von den aufgerufenen Funktionen zusammen mit Informationen bzgl. der Laufzeit wie die Laufzeit der Funktion, kumulierte Laufzeit, Anzahl von Aufrufe, ... Die Liste wird nach Laufzeit sortiert. Darueber hinaus stellt gprof auch diese Informationen nochmal in einem Aufrufhierachie, mit der man festellen kann, welche Funktion von welcher Funktion aufgerufen wird.

Das Programm verbringt die meiste Zeit (94,64%) in der `calculate` Funktion, die nur einmal aufgerufen wird. Der Rest der Zeit verbringt das Programm in `getResiduum`, die aber ca. 2,7 Millionen mal aufgerufen wird.

3. Profiling mit perf:
""""""""""""""""""""""""""""
task-clock (msec): die gestamte Laufzeit von dem Programm.

context-switches: die Anzahl von Kontextwechsel, d.h. wievielmal wurde der Prozess vom Scheduler ausgelagert und wierhergestellt. Kontextwechsel findet statt, wenn ein Prozess durch einen anderen Prozess verdrängt wird.

cpu-migrations: wievielmal der Scheduler den Prozess von einem CPU zu einem anderen CPU umziehen.

page-faults: Ein Page-Fault findet statt, wenn die Daten des virtuellen Speichers nicht im Hauptspeicher sind und muessen in den Hauptspeicher geladen werden.

cycles: Anzahl von für das Programm verbrauchten CPU-Zyklen 

stalled-cycles-frontend und -backend: die Zyklen in denen die CPU nichts ausführt.

instructions: Anzahl von Code-Befehle asugeführt wurden.

branches: Anzahl der Verzeigungen im Programm.

branch-misses: der CPU rät bei einer Verzweigung welcher Teil wird ausgeführt, bevor die Bedingung ausgewertet wird, damit Befehle schneller geladen werden. Bei einer falschen Rateversuch zählt es als ein branch-miss.

4. Optimierung des Programms
""""""""""""""""""""""""""""
Aus diesem Ergebnis des Profilings ist offensichlicht `calculate` zu optimieren und ggf. `getResiduum`.

Die Schleifen in der `calculate` Funktion werden so konstruiert, dass die Matrix-Elementen spaltenweise zugeriffen werden, d.h. der Code der inneren Schleife geht die Elementen in einer Spalten durch. Da Arrays in C zeilenweise im Hauptspeicher gespeichert werden, der Cache wird besser ausgenutzt (mehr Cache-Hit), wenn auf die Elementen auch zeilenweise zugegriffen wird.

Erste Optimierung: Die For-Schleife mit `i` und `j` austauschen.

Zweite Optimierung: aktiviert Optimierung des Compilers mit dem `-O3` Flag.

Ergebnis: das Programm läuft in ca. 12 Sekunden, viel schneller als das originale Programm, das in ca. 3 Minuten läuft.
